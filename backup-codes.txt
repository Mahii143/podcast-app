App.js

// import { useEffect, useState } from 'react';
// import { Routes, Route, Navigate, useNavigate } from 'react-router-dom';


// import Home from './page/Home';
// import Signup from './page/Signup';
// import Login from './page/Login';
// import Profile from './page/Profile';



// function App() {
//   const [token, setToken] = useState(null);

//   useEffect(() => {
//     console.log('token from app.js: ', token);
//     useNavigate('/');
//   }, [token]);


//   const updateToken = (newToken) => {
//     setToken(newToken);
//   };

//   const useNavToHome = () => {
//     const navigate = useNavigate();
//     useEffect(()=>{
//       if(token) navigate('/');
//     },[navigate, token]);
//   }
//   useNavToHome();
//   // Conditionally render Login page if token is null
//   if (token === null) {
//     return (
//       <Routes>
//         <Route path="/login" element={<Login updateToken={updateToken} />} />
//         {/* Redirect to Login page for any other route */}
//         <Route path="/*" element={<Navigate to="/login" replace />} />
//       </Routes>
//     );
//   }

//   return (
//     <Routes>
//       <Route path="/" element={<Home />} />
//       <Route path="/signup" element={<Signup updateToken={updateToken} />} />
//       {/* Render protected routes only if token is not null */}
//       <Route
//         path="/protected"
//         element={
//           // Render protected routes only if token is not null
//           token ? <ProtectedRoutes /> : <Navigate to="/login" replace />
//         }
//       />
//     </Routes>
//   );
// }

// // Example of protected routes to render when token is not null
// const ProtectedRoutes = () => {
//   return (
//     <>
//       {/* Render protected routes here */}
//       <Route path="/dashboard" element={<Profile />} />
//       {/* <Route path="/profile" element={<Profile />} /> */}
//     </>
//   );
// };

// export default App;


Login.js

import React, { useState } from 'react';
import { Link } from 'react-router-dom'

import { connect } from 'react-redux';
import { setToken } from '../action';

const Login = ({ setToken, updateToken, userId, token }) => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const handleLogin = async (e) => {
        // Perform login logic with email and password
        // Example: send data to API, authenticate user, etc.
        e.preventDefault();
        try {
            const response = await fetch('http://localhost:3001/login', {
                method: 'POST',
                body: JSON.stringify({ email, password }),
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            const data = await response.json();
            // Assuming the token is received as part of the response data
            const tkn = data.token;

            setToken(userId, tkn);
            updateToken(tkn); // Update the token in the App.js component
            const currentToken = token[userId];
            console.log('token from login.js: ', currentToken);

        } catch (error) {
            console.error('Error while logging in:', error);
        }
    };

    return (
        <div>
            <form>
                <h1> Sign In </h1>
                <div>
                    <label htmlFor="email-address">
                        Email address
                    </label>
                    <input
                        id="email-address"
                        name="email"
                        type="email"
                        required
                        placeholder="Email address"
                        onChange={(e) => setEmail(e.target.value)}
                    />
                </div>

                <div>
                    <label htmlFor="password">
                        Password
                    </label>
                    <input
                        id="password"
                        name="password"
                        type="password"
                        required
                        placeholder="Password"
                        onChange={(e) => setPassword(e.target.value)}
                    />
                </div>

                <div>
                    <button
                        onClick={handleLogin}
                    >
                        Login
                    </button>
                </div>
            </form>

            <p className="text-sm text-white text-center">
                No account yet?
                <Link to="/signup">
                    Sign up
                </Link>
            </p>

        </div>

    )
}

// export default Login
export default connect(
    mapStateToProps,
    { setToken }
  )(Login);